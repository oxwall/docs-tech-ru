.. _forms-label:

Формы
=====

Платформа **Oxwall** предоставляет достаточно богатый функционал для приема и обработки данных от клиента используя ^HTML формы.
Ниже мы рассмотрим основные моменты по созданию форм, приему и обработки, валидации и фильтрации данных формы.

Фильтры
-------

Фильтры в формах необходимы для первичной очистки вводимых данных перед их валидацией, к примеру если нам не нужны **html** теги или пробелы, мы с легкостью
можем от них избавится добавив соот-й фильтр к полю формы. Ниже перечислены встроенные фильтры:

**ow_core/filter.php**

У вас есть возможность создать собственный фильтр реализуя методы интерфейса - **OW_IFilter**

Валидаторы
----------

Основная задача валидаторов - это проверить корректность вводимых данных в поля формы. Для этого в платформе  **Oxwall** предусмотрено
огромное количество валидаторов:

**ow_core/validator.php**

#. **RequiredValidator** - проверяет были ли введены данные.
#. **WyswygRequiredValidator** - проверяет были ли введены данные в визуальный редактор (для того, чтобы проверить данные сперва удаляет все html теги, затем проверяет оставшийся текст).
#. **StringValidator** - проверяет строку или массив строк (опционально можно задать минимальную и максимальную длину строки)
#. **RegExpValidator** - проверяет строку или массив строк на соот-е регулярному выражению.
#. **EmailValidator** - проверяет email или массив email.
#. **UrlValidator** - проверяет url или массив url.
#. **AlphaNumericValidator** - проверяет строку или массив строк на наличие в ней только цифр и символов латинского алфавита.
#. **InArrayValidator** - проверяет строку на ее наличие в списке предопределенных значений.
#. **IntValidator** - проверяет число или массив чисел (опционально можно задать минимальное и максимальное число)
#. **FloatValidator** - проверяет действительное число или массив действительных чисел (опционально можно задать минимальное и максимальное число)
#. **DateValidator** - проверяет дату или массив дат (опционально можно задать формат даты, а также минимальный и максимальный год)
#. **CaptchaValidator** - проверяет значение ^**captcha**
#. **RangeValidator** - проверяет число или массив чисел на нахождение их в некотором интервале.

Не смотря на большое количество встроенных валидатров, у вас всегда есть возможность создать собственный валидатор реализуя методы
абстрактного класса - **OW_Validator**

Создание формы
--------------

Пример создания формы :

**classes/user_form.php**

.. code-block:: php

    <?php

        class MYSUPERPLUGIN_CLASS_UserForm extends Form
        {
            /**
             * Class constructor
             */
            public function __construct(MYSUPERPLUGIN_BOL_User $user = null)
            {
                // set the form name
                parent::__construct('user-form');

                // allow upload files
                $this->setEnctype(Form::ENCTYPE_MULTYPART_FORMDATA);

                // add user name field
                $userName = new TextField('userName');
                $userName->setRequired(true);
                $userName->setValue(($user ? $user->userName : null));
                $this->addElement($userName);

                // add user email field
                $email = new TextField('email');
                $email->setRequired(true);
                $email->addValidator(new EmailValidator());
                $email->setValue(($user ? $user->email : null));
                $this->addElement($email);
            }
        }